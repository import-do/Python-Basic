print("오늘 하루도 행복하자")   


연산자   
=======   

# 1. 축약연산자 : 연산자를 축약하여 사용가능함   

  a=1

  a=a+1
  a+=1

  a=a-1
  a-=1
  
  a=a*1
  a*=1

  a=a/2
  a/=2

  a=a//2
  a//=2

   

#### *누적   

  a=10
  a=a+1
  a+=1        # a-=1, a*=1, a/=1
  print(a)
  
  print('부호변경 : ',a*-1,-a,--a,+a)



사칙연산
1 + 2
2 - 1
2 * 3
7 / 2        # 부동소수점 나누기
7 // 2       # 나눗셈의 몫 (정수나누기, 소수점이하는 버림)
7 % 2       # 나눗셈의 나머지
2 ** 3       # 제곱연산 



# 수학관련 메소드 불러오기
import math
math.pow(2,3)


f=10.12   # 부동소숫점(float)
type(f)

f=10.4e3  # 지수표현 10.4*10**3
type(f)






# 치환연산자

v1=3    # 3=v1 은 불가
v1=v2=v3=5
print(v1,v2,3)

print('출력1',end=',')
print('출력1',end=':')
print('출력1',end=' ')
print('출력2')
# print 문은 함수내의 내용을 출력하고 다음줄로 넘어감 자동줄바꿈
# end='' 로 구분자를 설정하여 다음줄이 아닌 바로 옆에 출력될 수 있도록함


# 코드가 길어질 때는 가독성을 위해 \ 를 사용하여 여러줄로 작성할 수 있다
print('출력1', \
      end=' ')
print('출력2')


v1=1,2,3
print(v1)   # 결과 튜플타입으로 출력 (1, 2, 3)




v1,v2=10,20
print(v1,v2)

# 값을 맞바꾸고 싶을 때 참조값 교환
v2,v1=v1,v2

# 자바를 함수화 한 것 = scala


print()
# v1,v2=1,2,3,4,5    ValueError: too many values to unpack (expected 2)

v1,*v2=1,2,3,4,5    # 1은 v1에, 나머지는 v2 에 저장
# * : packing 연산

print(v1)   # 1
print(v2)   # [2, 3, 4, 5]


*v1,v2=1,2,3,4,5   
print(v1)   # [1, 2, 3, 4]
print(v2)   # 5

*v1,v2,v3=1,2,3,4,5   
print(v1)   # [1, 2, 3]
print(v2)   # 4
print(v3)   # 5

print('------')
print(5+3,5-3,5*3,5/3)

print(53,5//3,5%3,divmod(5,3))
print(3+4*5,(3+4)*5)    
# 연산자 우선순위: () -> 산술연산자(*,/ > +,-) -> 관계연산자(==,>,<,>=,<=,!=) -> 논리연산자(and,or,not) -> = 
# 왼쪽부터 연산

print()
print(5>3,5==3,5!=3,5<=3)

print(5>3 and 4<3, 5>3 and 4>=3)
print(5>3 or 4<3, 5>3 and 4>=3)
print(not(5>=3))


print()
print('문자열 데이터에 대한 연산 + , * ')
print('한'+'국'+'인')
mbc='문화방송'+'11'
print(mbc)
print('한국'+'한국'+'한국')
print('한국'*3)
print('**'*20)






# 논리연산자
x=1
y=2

y>x
y>=x
y<x
y<=x
y==x
y!=x

2>1 and 3>2
2>1 or 3>2
not 1>2



# [ bool ] : 참(True), 거짓(False)를 나타내는 자료형, 대소문자 구분 #


x=True
y=False
type(x)
type(y)

x==y
1==1
2>1
1!=2



# not에 숫자를 붙이면?
not 1     # False
not -1    # False
not 0     # True
not None  # True


# True 표현방법
bool(1)
bool(-1)
bool('python')
bool([1,2,3])
bool((1,2,3))
bool({1,2})


# False 표현방법
bool(0)
bool([])
bool(())
bool({})
bool(None)
bool('')


print()
print('불린처리:',True,False,bool(True),bool(False))
print('불린처리:',bool(1),bool(1.5),bool(-1))
print('불린처리:',bool(0),bool(0.0),bool(None),bool(''),bool([]),bool({}))


